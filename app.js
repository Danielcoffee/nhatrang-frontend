// Frontend JavaScript v·ªõi Hedera Integration
let currentUser = null;
let hederaAccount = null;

function showRegister() {
    document.getElementById('loginSection').style.display = 'none';
    document.getElementById('registerSection').style.display = 'block';
}

function showLogin() {
    document.getElementById('registerSection').style.display = 'none';
    document.getElementById('loginSection').style.display = 'block';
}

// ƒêƒÉng k√Ω t√†i kho·∫£n m·ªõi v·ªõi Hedera
// C·∫•u h√¨nh API endpoint
// ‚úÖ M·ªöI (thay b·∫±ng)
// Dynamic API Base URL for Production
const API_BASE = window.location.hostname === 'localhost' 
    ? 'http://localhost:3001'
    : 'nhatrang-backend-production.up.railway.app';  // URL backend production

    
async function register() {
    const phone = document.getElementById('regPhone').value;
    const password = document.getElementById('regPassword').value;
    
    if (!phone || !password) {
        alert('Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin');
        return;
    }

    try {
        // G·ªçi backend API th·∫≠t
        const response = await fetch(`${API_BASE}/api/register`, {
            method: 'POST',
            headers: { 
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify({ 
                phone: phone,
                name: `Kh√°ch h√†ng ${phone}`
            })
        });

        const result = await response.json();
        
        if (result.success) {
            // L∆∞u th√¥ng tin user v·ªõi Hedera account TH·∫¨T
            currentUser = {
                phone: phone,
                password: password,
                points: result.user.points,
                hederaAccountId: result.user.hederaAccountId,
                transactionId: result.transactionId
            };

            localStorage.setItem('currentUser', JSON.stringify(currentUser));
            
            alert(`üéâ ƒêƒÉng k√Ω th√†nh c√¥ng!\nT√†i kho·∫£n Hedera: ${result.user.hederaAccountId}\nNh·∫≠n ngay ${result.user.points} ƒëi·ªÉm th∆∞·ªüng!`);
            showDashboard();
            
        } else {
            alert('L·ªói ƒëƒÉng k√Ω: ' + result.message);
        }
        
    } catch (error) {
        console.error('L·ªói k·∫øt n·ªëi:', error);
        alert('L·ªói k·∫øt n·ªëi server. Vui l√≤ng th·ª≠ l·∫°i.');
    }
}

// T·∫°o account Hedera (DEMO - frontend only)
async function createHederaAccount(phone) {
    // Trong demo, ch√∫ng ta gi·∫£ l·∫≠p
    // TH·ª∞C T·∫æ: G·ªçi backend API ƒë·ªÉ t·∫°o account an to√†n
    
    const demoAccountId = `0.0.${Math.floor(100000 + Math.random() * 900000)}`;
    const demoPrivateKey = `302e...${Math.random().toString(36).substr(2, 10)}`;
    
    return {
        accountId: demoAccountId,
        privateKey: demoPrivateKey
    };
}

function login() {
    const phone = document.getElementById('phoneNumber').value;
    const password = document.getElementById('password').value;

    const savedUser = localStorage.getItem('currentUser');
    
    if (savedUser) {
        const user = JSON.parse(savedUser);
        if (user.phone === phone && user.password === password) {
            currentUser = user;
            showDashboard();
            return;
        }
    }
    
    alert('Sai SƒêT ho·∫∑c m·∫≠t kh·∫©u. ƒêƒÉng k√Ω t√†i kho·∫£n m·ªõi!');
}

// FUNCTION LOGOUT M·ªöI - QUAN TR·ªåNG!
function logout() {
    if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën tho√°t?')) {
        // X√≥a currentUser kh·ªèi memory
        currentUser = null;
        
        // X√ìA HO√ÄN TO√ÄN: X√≥a c·∫£ localStorage n·∫øu mu·ªën reset ho√†n to√†n
        // localStorage.removeItem('currentUser');
        // localStorage.removeItem('hederaTransactions');
        
        // Reset giao di·ªán v·ªÅ ban ƒë·∫ßu
        resetToInitialState();
        
        alert('üëã ƒê√£ tho√°t th√†nh c√¥ng!');
    }
}

// Reset giao di·ªán v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu
function resetToInitialState() {
    // ·∫®n t·∫•t c·∫£ sections
    document.getElementById('dashboard').style.display = 'none';
    document.getElementById('logoutSection').style.display = 'none';
    document.getElementById('hederaInfo').style.display = 'none';
    
    // Hi·ªÉn th·ªã login section
    document.getElementById('loginSection').style.display = 'block';
    document.getElementById('registerSection').style.display = 'none';
    
    // Reset form values
    document.getElementById('phoneNumber').value = '';
    document.getElementById('password').value = '';
    document.getElementById('regPhone').value = '';
    document.getElementById('regPassword').value = '';
    
    // Clear QR code
    document.getElementById('qrcode').innerHTML = '<span class="text-muted">QR code s·∫Ω xu·∫•t hi·ªán ·ªü ƒë√¢y</span>';
    
    // Reset transactions list
    document.getElementById('transactionsList').innerHTML = '<p class="text-muted">Ch∆∞a c√≥ giao d·ªãch n√†o</p>';
}

function showDashboard() {
    // ·∫®n login/register sections
    document.getElementById('loginSection').style.display = 'none';
    document.getElementById('registerSection').style.display = 'none';
    
    // Hi·ªÉn th·ªã dashboard v√† logout button
    document.getElementById('dashboard').style.display = 'block';
    document.getElementById('logoutSection').style.display = 'block';
    document.getElementById('hederaInfo').style.display = 'block';
    
    // C·∫≠p nh·∫≠t th√¥ng tin user
    document.getElementById('pointsDisplay').textContent = currentUser.points;
    document.getElementById('accountId').textContent = `Account: ${currentUser.hederaAccountId}`;
    
    // Load l·ªãch s·ª≠ giao d·ªãch
    loadTransactionHistory();
}

// T·∫°o QR Code - FIXED
function generateQR() {
    if (!currentUser) {
        alert('Vui l√≤ng ƒëƒÉng nh·∫≠p tr∆∞·ªõc');
        return;
    }

    const qrData = JSON.stringify({
        type: 'nhatrang_reward',
        phone: currentUser.phone,
        accountId: currentUser.hederaAccountId,
        timestamp: Date.now(),
        points: 10 // ƒêi·ªÉm th∆∞·ªüng khi qu√©t
    });

    // X√≥a QR c≈©
    const qrcodeElement = document.getElementById('qrcode');
    qrcodeElement.innerHTML = '';
    
    // T·∫°o QR m·ªõi
    try {
        new QRCode(qrcodeElement, {
            text: qrData,
            width: 200,
            height: 200,
            colorDark: "#000000",
            colorLight: "#ffffff",
            correctLevel: QRCode.CorrectLevel.H
        });
        
        alert('‚úÖ QR code ƒë√£ ƒë∆∞·ª£c t·∫°o!\nQu√©t QR n√†y ƒë·ªÉ nh·∫≠n 10 ƒëi·ªÉm th∆∞·ªüng.');
        addTransaction('QR_CREATED', 'T·∫°o QR code nh·∫≠n ƒëi·ªÉm');
        
    } catch (error) {
        console.error('L·ªói t·∫°o QR:', error);
        alert('L·ªói t·∫°o QR code. Vui l√≤ng th·ª≠ l·∫°i.');
    }
}

// Th√™m ƒëi·ªÉm demo (Hedera integration)
async function addDemoPoints() {
    if (!currentUser) {
        alert('Vui l√≤ng ƒëƒÉng nh·∫≠p tr∆∞·ªõc');
        return;
    }

    try {
        // G·ªçi backend API th·∫≠t ƒë·ªÉ th√™m ƒëi·ªÉm
        const response = await fetch(`${API_BASE}/api/add-points`, {
            method: 'POST',
            headers: { 
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify({ 
                userAccountId: currentUser.hederaAccountId,
                points: 10,
                partnerId: 'demo_partner'
            })
        });

        const result = await response.json();
        
        if (result.success) {
            // C·∫≠p nh·∫≠t ƒëi·ªÉm
            currentUser.points += 10;
            localStorage.setItem('currentUser', JSON.stringify(currentUser));
            
            // Hi·ªÉn th·ªã ƒëi·ªÉm m·ªõi
            document.getElementById('pointsDisplay').textContent = currentUser.points;
            
            // Th√™m v√†o l·ªãch s·ª≠
            addTransaction('ADD_POINTS', `Nh·∫≠n 10 ƒëi·ªÉm t·ª´ demo`, result.transactionId);
            
            alert(`üéâ +10 ƒëi·ªÉm!\nTransaction ID: ${result.transactionId}\nS·ªë d∆∞ m·ªõi: ${result.newBalance} ƒëi·ªÉm`);
            
        } else {
            alert('L·ªói th√™m ƒëi·ªÉm: ' + result.message);
        }
        
    } catch (error) {
        alert('L·ªói k·∫øt n·ªëi: ' + error.message);
    }
}

// Th√™m giao d·ªãch v√†o l·ªãch s·ª≠
function addTransaction(type, description, transactionId = null) {
    if (!transactionId) {
        transactionId = `0.0.${Math.floor(1000000 + Math.random() * 9000000)}`;
    }
    
    const transactions = JSON.parse(localStorage.getItem('hederaTransactions') || '[]');
    
    const newTransaction = {
        id: transactionId,
        type: type,
        description: description,
        points: type === 'ADD_POINTS' ? 10 : 0,
        timestamp: new Date().toLocaleString('vi-VN'),
        status: 'SUCCESS'
    };
    
    transactions.unshift(newTransaction);
    localStorage.setItem('hederaTransactions', JSON.stringify(transactions));
    
    loadTransactionHistory();
}

// T·∫£i l·ªãch s·ª≠ giao d·ªãch
function loadTransactionHistory() {
    const transactions = JSON.parse(localStorage.getItem('hederaTransactions') || '[]');
    const container = document.getElementById('transactionsList');
    
    if (transactions.length === 0) {
        container.innerHTML = '<p class="text-muted">Ch∆∞a c√≥ giao d·ªãch n√†o</p>';
        return;
    }
    
    container.innerHTML = transactions.map(tx => `
        <div class="transaction-item mb-2 p-2 border rounded">
            <div class="d-flex justify-content-between">
                <strong>${tx.description}</strong>
                <span class="badge bg-success">${tx.status}</span>
            </div>
            <div class="text-muted small">
                TX: ${tx.id} ‚Ä¢ ${tx.timestamp}
                ${tx.points ? ` ‚Ä¢ +${tx.points} ƒëi·ªÉm` : ''}
            </div>
        </div>
    `).join('');
}

// Kh·ªüi t·∫°o
document.addEventListener('DOMContentLoaded', function() {
    // Ki·ªÉm tra ƒëƒÉng nh·∫≠p
    const savedUser = localStorage.getItem('currentUser');
    if (savedUser) {
        currentUser = JSON.parse(savedUser);
        document.getElementById('phoneNumber').value = currentUser.phone;
        // T·ª∞ ƒê·ªòNG ƒêƒÇNG NH·∫¨P N·∫æU ƒê√É C√ì USER
        showDashboard();
    } else {
        // HI·ªÇN TH·ªä LOGIN N·∫æU CH∆ØA ƒêƒÇNG NH·∫¨P
        resetToInitialState();
    }
    
    loadTransactionHistory();
});